input = 
1, 1, 0, 1, 1, 0, 1 (, 0)
           sidx
0  1  2  3  4  5  6    7 

DOES NOT FIND: Vector(1, 0, 1, 1, 0, 1, 0)
DOES NOT FIND: Vector(1, 0, 1, 0)

:::::::::::

active
   source is Node #1
   startIdx = 4
   stopIdx  = 7
   d.h. ist slice (1, 0, 1 [,0])

look up edge at Node #1 going out at corpus pos. 4 ('1')
// ???

-> yields LeafEdge(startIdx = 1)

teste element 1 + (7 - 4) = 4 -> yields '1'

::::::

der split muesste theoretisch in der leaf-edge von node#1 zu '1' erfolgen, und zwar darin als splitIdx = 3 (denn der suffix 11010 fehlt bisher; in dieser edge ist bisher nur 11011)
; aber faelschlicherweise ist der splitIdx in `split` berechnet als 4 (wg. active.span == 3 ?)
// nein, das stimmt. die 3 ist der active.span. splitIdx ist der absolute offset in corpus
; neue node mit tail = node #1
; newEdge1 : InnerEdge(1,4, target = newNode)  // ok
node #1 edges += '1' -> newEdge1 // ok -- ueberschreibt alten eintrag LeafEdge(start=1)
; newEdge2 = edge.replaceStart(splitIdx) = LeafEdge(start=4)
---> das ist falsch. denn damit wuerde die wiederum bei '1' anfangen; auch das nachfolge abspeichern der edge ist damit falsch (corpus(splitIdx==4)=='1')!
; NEIN. ist natuerlich richtig, dies ist erst der split, nicht das einfuegen der neuen leaf-node!!

so we've got

1, 1, 0, 1 --- 1, 0, 1

new LeafEdge(7), hence:
           
1, 1, 0, 1 --- 1, 0, 1 (,0)
           --- (0)

::::
dropToTail!
--> source is an iinner node (Node #1)
; source becomes root
; canonize:
   edge = root.edges(corpus(4)=='1')

::::::::::::

1, 1, 0, 1, 1, 0, 1
1, 0, 1, 1, 0, 1
0, 1, 1, 0, 1
1, 1, 0, 1
1, 0, 1
0, 1
1


::::::::::::::
::::::::::::::

INPUT: Vector(1, 0, 0, 1, 0, 1, 0, 1, 0, 0)
GRAPH with N=9

digraph suffixes {
  0 [shape=circle];
  0 -> 2 [label="1,0"];
  2 [shape=circle];
  2 -> leaf0 [label="0,1,0,1,0,1,0"];
  leaf0 [shape=point];
  2 -> leaf1 [label="1,0,1,0"];
  leaf1 [shape=point];
  2 -> 0 [style=dotted];
  0 -> 1 [label="0"];
  1 [shape=circle];
  1 -> leaf2 [label="0,1,0,1,0,1,0"];
  leaf2 [shape=point];
  1 -> leaf3 [label="1,0,1,0,1,0"];
  leaf3 [shape=point];
  1 -> 0 [style=dotted];
}


...appending 0

GRAPH with N=10
digraph suffixes {
  0 [shape=circle];
  0 -> 2 [label="1,0"];
  2 [shape=circle];
  2 -> leaf0 [label="0,1,0,1,0,1,0,0"];
  leaf0 [shape=point];
  2 -> 4 [label="1,0"];
  4 [shape=circle];
  4 -> leaf1 [label="1,0,0"];
  leaf1 [shape=point];
  4 -> leaf2 [label="0"];
  leaf2 [shape=point];
  4 -> 2 [style=dotted];
  2 -> 0 [style=dotted];
  0 -> 1 [label="0"];
  1 [shape=circle];
  1 -> leaf3 [label="0,1,0,1,0,1,0,0"];
  leaf3 [shape=point];
  1 -> 3 [label="1,0,1,0"];
  3 [shape=circle];
  3 -> leaf4 [label="1,0,0"];
  leaf4 [shape=point];
  3 -> leaf5 [label="0"];
  leaf5 [shape=point];
  3 -> 4 [style=dotted];
  1 -> 0 [style=dotted];
}

DOES NOT FIND: Vector(0, 1, 0, 0)
