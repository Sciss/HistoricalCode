dnl
dnl $Id: configure.in,v 1.55 2004/04/15 22:47:23 niklaswerner Exp $
dnl
dnl Copyright (C) 2002-2003 Niklas Werner <niklas@niklaswerner.de>
dnl
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
dnl
dnl Process this file with autoconf to produce a configure script.

AC_INIT(configure.in)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(sonasound, 1.1)
AM_CONFIG_HEADER(config.h)

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_C_BIGENDIAN
AC_C_INLINE
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_HEADER_STDC

dnl ======================
dnl PKGCONFIG preparations
dnl ======================

if test -z $PKG_CONFIG_PATH; then
	PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig"
	if test "$target_vendor" = "apple"; then
		PKG_CONFIG_PATH="/sw/lib/pkgconfig:$PKG_CONFIG_PATH"
	fi
fi

export PKG_CONFIG_PATH


dnl ==========

dnl ************************************************************************
dnl @synopsis AC_C99_FUNC_LRINT
dnl
dnl Check whether C99's lrint function is available.
dnl @version 1.1
dnl @author Erik de Castro Lopo <erikd AT mega-nerd DOT com>
dnl
dnl Permission to use, copy, modify, distribute, and sell this file for any 
dnl purpose is hereby granted without fee, provided that the above copyright 
dnl and this permission notice appear in all copies.  No representations are
dnl made about the suitability of this software for any purpose.  It is 
dnl provided "as is" without express or implied warranty.
dnl
dnl Modified to work without warnings on newer autoconf (Niklas)
AC_CACHE_CHECK(for lrint,
  ac_cv_c99_lrint,
[AC_TRY_COMPILE([
#define		_ISOC9X_SOURCE	1
#define 	_ISOC99_SOURCE	1
#define		__USE_ISOC99	1
#define 	__USE_ISOC9X	1
#include	<math.h>],
[	int value = lrint (0.432) ; ], ac_cv_c99_lrint=yes, ac_cv_c99_lrint=no)
])
dnl ************************************************************************
dnl @synopsis AC_C99_FUNC_LRINTF
dnl
dnl Check whether C99's lrintf function is available.
dnl @version 1.1
dnl @author Erik de Castro Lopo <erikd AT mega-nerd DOT com>
dnl
dnl Permission to use, copy, modify, distribute, and sell this file for any 
dnl purpose is hereby granted without fee, provided that the above copyright 
dnl and this permission notice appear in all copies.  No representations are
dnl made about the suitability of this software for any purpose.  It is 
dnl provided "as is" without express or implied warranty.
dnl
dnl Modified to work without warnings on newer autoconf (Niklas)
AC_CACHE_CHECK(for lrintf,
  ac_cv_c99_lrintf,
[AC_TRY_COMPILE([
#define		_ISOC9X_SOURCE	1
#define 	_ISOC99_SOURCE	1
#define		__USE_ISOC99	1
#define 	__USE_ISOC9X	1
#include	<math.h>],
[	int value = lrintf (0.432) ; ], ac_cv_c99_lrintf=yes, ac_cv_c99_lrintf=no)
])
AC_CHECK_LIB([m], lrint, ac_cv_c99_lrint=yes, ac_cv_c99_lrint=no 
	)
AC_CHECK_LIB([m], lrintf, ac_cv_c99_lrintf=yes, ac_cv_c99_lrintf=no 
	)

AC_CHECK_LIB([m], log2f, AC_DEFINE(HAVE_LOG2F, 1, Define if you have log2f().)  
	)
AC_CHECK_LIB([m], log2, AC_DEFINE(HAVE_LOG2, 1, Define if you have log2().)  
	)
if test $ac_cv_c99_lrint = yes; then
  AC_DEFINE(HAVE_LRINT, 1,
            [Define if you have C99's lrint function.])
fi
if test $ac_cv_c99_lrintf = yes; then
  AC_DEFINE(HAVE_LRINTF, 1,
            [Define if you have C99's lrintf function.])
fi

AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE

AC_ARG_ENABLE(fast-ga,[  --enable-fast-ga       Use this, if your graphics card supports Blitting (glCopyPixels())],
 AC_DEFINE(HAVE_FAST_GA, 1, "Define this, if Blitting should be used instead of textures")
 FGA=1
 , ) 

AC_CHECK_LIB([m], sqrt, , 
	AC_MSG_ERROR(Cannot find a math library.
	Hint: Your system seems to be seriously f***d ...))

AC_CHECK_LIB(pthread, pthread_create, , 
	AC_MSG_ERROR(cannot find pthreads. WTF?
	))
AM_PATH_GLIB(1.2.0, ,
	AC_MSG_ERROR(Cannot find GLIB: is glib-config in path?))
AM_PATH_GTK(1.2.0, ,
            AC_MSG_ERROR(Cannot find GTK: Is gtk-config in path?))

dnl Checks for libraries.
LDFLAGS_ORIG="$LDFLAGS"
CFLAGS_ORIG="$CFLAGS"
CPPFLAGS_ORIG="$CPPFLAGS"
AC_CHECK_LIB(GL, glFlush, , 
	AC_MSG_ERROR(cannot find OpenGL-Libraries. Is OpenGL installed?
	Hint: Check for your LDFLAGS (-L/usr/X11R6/lib or -lpthread missing?)), -lm)
dnl # FIXME: Replace `main' with a function in `-lGLU':
dnl LDFLAGS+=" -lGL "
AC_CHECK_LIB([GLU], [gluBeginSurface], , 
	AC_MSG_ERROR(cannot find GLU-Libararies. Is GLU installed?
	Hint: Check for your LDFLAGS (-L/usr/X11R6/lib or -lpthread missing?)))

dnl # FIXME: Replace `main' with a function in `-lgtkgl':
dnl LDFLAGS="$LDFLAGS_ORIG $GTK_LIBS"
AC_CHECK_LIB([gtkgl], [gdk_gl_query], GTK_GL_LIBS="-lGL -lGLU -lgtkgl",
	AC_MSG_ERROR(Cannot find Gtk-GLArea. Is gtkglarea installed? 
	Hint: Define its prefix to find libgtkgl), $GTK_LIBS)
dnl # FIXME: Replace `main' with a function in `-lsndfile':
dnl AC_CHECK_LIB([sndfile], [sf_open], SNDFILE_LIBS="-lsndfile",
dnl	AC_MSG_ERROR(Cannot find LibSndFile. Is libsndfile installed?), -lpthread)
dnl CFLAGS="$CFLAGS_ORIG $GTK_CFLAGS"
dnl LDFLAGS="$LDFLAGS_ORIG -lfftw -lm"
dnl LDFLAGS=$LDFLAGS_ORIG
AC_ARG_WITH(fftw,[  --with-fftw=PFX        Prefix where fftw is installed (optional)],
 fftw_prefix="$withval", fftw_prefix="") 

AC_ARG_WITH(fftw3,[  --with-fftw3        Try to use fftw3 if installed (yes by default)],
 try_fftw3="$withval", fftw_prefix="yes") 


if test "x$try_fftw3" != "xno"
then
   # try fftw3 first
   #PKG_CHECK_MODULES(FFTW, fftw3f >= 3.0, [AC_DEFINE(USING_FFTW3, [1], [Using FFTW3])] , [AC_DEFINE(USING_FFTW3, [0], [Using FFTW3])] )
   PKG_CHECK_MODULES(FFTW, fftw3 >= 3.0, have_fftw3=yes , have_fftw3=no )
fi

if test "x$have_fftw3" = "xyes"
then

   AC_DEFINE(USING_FFTW3, [1], [Using FFTW3])

else
  # no fftw3


if test "x$fftw_prefix" != "x"; then
	FFTW_LIB_PREFIX="-L$fftw_prefix/lib"
	LDFLAGS="$LDFLAGS $FFTW_LIB_PREFIX"
fi
AC_CHECK_LIB([rfftw], [rfftw_create_plan], FFTW_LIBS="$FFTW_LIB_PREFIX -lfftw -lrfftw", FFTW_LIBS="", -lfftw -lm)
if test "x$FFTW_LIBS" = "x"; then
	AC_CHECK_LIB([drfftw], [rfftw_create_plan], FFTW_LIBS="$FFTW_LIB_PREFIX -ldfftw -ldrfftw", FFTW_LIBS="", -ldfftw -lm)
fi
dnl right, no double-FFTW and no symlink libfftw.so, so check for float
if test "x$FFTW_LIBS" = "x"; then
	AC_CHECK_LIB([srfftw], [rfftw_create_plan], FFTW_LIBS="$FFTW_LIB_PREFIX -lsfftw -lsrfftw", FFTW_LIBS="", -lsfftw -lm)
fi
dnl FFTW headers
if test "x$fftw_prefix" != "x"; then
	FFTW_INC_PREFIX="-I$fftw_prefix/include"
	CPPFLAGS="$CPPFLAGS $FFTW_INC_PREFIX"
	CFLAGS="$CFLAGS $FFTW_INC_PREFIX"
fi
AC_CHECK_HEADERS([fftw.h], , FFTWH="42")
AC_CHECK_HEADERS([sfftw.h], , SFFTWH="42")
AC_CHECK_HEADERS([dfftw.h], , DFFTWH="42")

if test "x$FFTW_LIBS" = "x"; then
	AC_MSG_ERROR(Cannot find LibFFTW. Is FFTW installed?
	Hint: Read README.fftw for detailed help on FFTW)
fi
if test "$FFTWH" = "42" && test "$SFFTWH" = "42" && test "$DFFTWH" = "42"; then
	AC_MSG_ERROR(Where are the FFTW Header Files? (devel-package missing?))
fi
dnl FFTW2
fi 
LDFLAGS=$LDFLAGS_ORIG
AC_ARG_WITH(portaudio,[  --with-portaudio=PFX        Prefix where PortAudio is installed (optional)],
 portaudio_prefix="$withval", portaudio_prefix="") 

if test "x$portaudio_prefix" != "x"; then
	PORTAUDIO_LIB_PREFIX="-L$portaudio_prefix/lib"
	LDFLAGS="$LDFLAGS $PORTAUDIO_LIB_PREFIX"
fi

AC_CHECK_LIB([portaudio], [Pa_Initialize], PORTAUDIO_LIBS="$PORTAUDIO_LIB_PREFIX -lportaudio",
	AC_MSG_ERROR(Cannot find LibPortAudio. Is Portaudio installed?
	), -lm -lpthread)
	
LDFLAGS=$LDFLAGS_ORIG

AC_ARG_WITH(sndfile,[  --with-sndfile=PFX        Prefix where libsndfile is installed (optional)],
 sndfile_prefix="$withval", sndfile_prefix="") 

if test "x$sndfile_prefix" != "x"; then
	SNDFILE_LIB_PREFIX="-L$sndfile_prefix/lib"
	LDFLAGS="$LDFLAGS $SNDFILE_LIB_PREFIX"
fi
AC_CHECK_LIB([sndfile], [sf_open], SNDFILE_LIBS="$SNDFILE_LIB_PREFIX -lsndfile",
	AC_MSG_ERROR(Cannot find LibSndFile. Is LibSndfile >= 1.0 installed?
	))
LDFLAGS=$LDFLAGS_ORIG
dnl standard headers
AC_CHECK_HEADERS([alloca.h argz.h errno.h fcntl.h getopt.h langinfo.h libintl.h limits.h locale.h stddef.h stdlib.h string.h strings.h sys/param.h unistd.h portaudio.h])

dnl standard funcs
AC_CHECK_FUNCS(getcwd getwd getopt strcspn strdup strstr strtoul uname)

dnl OpenGL headers
AC_CHECK_HEADERS([GL/gl.h], ,
	AC_MSG_ERROR(Where are the OpenGL Header Files? (devel-package missing?)))

dnl GLU headers
AC_CHECK_HEADERS([GL/glu.h], ,
AC_MSG_ERROR(Where are the GLU Header Files? (devel-package missing?)))

dnl gtkglarea headers

CPPFLAGS="$CPPFLAGS "`gtk-config --cflags`
CFLAGS="$CFLAGS "`gtk-config --cflags`
AC_CHECK_HEADERS([gtkgl/gtkglarea.h], ,
	AC_MSG_ERROR(Where are the GTKGLArea Header Files? (devel-package missing?)))
CPPFLAGS=$CPPFLAGS_ORIG
CFLAGS=$CFLAGS_ORIG
dnl libsndfile headers
if test "x$sndfile_prefix" != "x"; then
	SNDFILE_INC_PREFIX="-I$sndfile_prefix/include"
	CFLAGS="$CFLAGS $SNDFILE_INC_PREFIX"
	CPPFLAGS="$CPPFLAGS $SNDFILE_INC_PREFIX"
fi
AC_CHECK_HEADERS([sndfile.h], ,
AC_MSG_ERROR(Where are the libsndfile Header Files? (devel-package missing?)))
CPPFLAGS=$CPPFLAGS_ORIG
CFLAGS=$CFLAGS_ORIG


CPPFLAGS=$CPPFLAGS_ORIG
CFLAGS=$CFLAGS_ORIG

AC_TYPE_SIZE_T
AC_FUNC_ALLOCA
AC_FUNC_MALLOC
AC_FUNC_MMAP
AC_FUNC_STAT
dnl Add the languages which your application supports here.
ALL_LINGUAS=""
dnl AM_GNU_GETTEXT

dnl Set PACKAGE_LOCALE_DIR in config.h.
if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${ac_default_prefix}/${DATADIRNAME}/locale", "Install locale-Data there")
else
  AC_DEFINE_UNQUOTED(PACKAGE_LOCALE_DIR, "${prefix}/${DATADIRNAME}/locale", "Install locale-Data there")
fi

dnl Set PACKAGE_DATA_DIR in config.h.
if test "x${datadir}" = 'x${prefix}/share'; then
  if test "x${prefix}" = "xNONE"; then
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${ac_default_prefix}/share/${PACKAGE}", "Install Data there")
  else
    AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${prefix}/share/${PACKAGE}", "Install Data there")
  fi
else
  AC_DEFINE_UNQUOTED(PACKAGE_DATA_DIR, "${datadir}/${PACKAGE}", "Install Data there")
fi

dnl host checks
gcc_major_version=`$CC -v 2>&1 | tail -1 | cut -f 3 -d " " | cut -f 1 -d .`

dnl FIXME:  much nicer would be:
dnl AC_TRY_CFLAGS("-falign-functions=4", f_af="-falign-functions=4",
dnl        f_af="-malign-functions=4")
dnl

if test "$target_vendor" = "apple"; then
	if echo $target_os | grep "darwin6*" >/dev/null; then
		AC_DEFINE(MACOSX_DEPLOYMENT_TARGET, 10.2, "MacOsX Version")
		gcc_major_version=3
	elif echo $target_os | grep "darwin5*" >/dev/null; then
		AC_DEFINE(MACOSX_DEPLOYMENT_TARGET, 10.1, "MacOsX Version")
		gcc_major_version=2
	fi
	AC_DEFINE(MACOSX, 1, "Is that MacOsX?")
	AC_DEFINE(HAVE_FAST_GA, 1, "Define this, if Blitting should be used instead of textures")
	altivecOsX=`sysctl -n hw.vectorunit`
	if test "$altivecOsX" = "1"; then
		AC_DEFINE(HAVE_ALTIVEC_OSX, 1, "Is there a G4?")
		LDFLAGS="-bind-at-load -DMACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET $LDFLAGS -framework vecLib -framework CoreServices -framework OpenGL"
		OPTIM_FLAGS="-O3 -mcpu=7400 -faltivec -mhard-float"
	else
		LDFLAGS="-bind-at-load -DMACOSX_DEPLOYMENT_TARGET=$MACOSX_DEPLOYMENT_TARGET $LDFLAGS -framework CoreServices -framework OpenGL"
		OPTIM_FLAGS="-O3 -mcpu=750 -mpowerpc-gfxopt -mhard-float"
	fi
fi
if test "$target_cpu" = "powerpc"; then
	AC_DEFINE(POWERPC, 1, "Are we running a ppc CPU?")
	altivecLinux=`cat /proc/cpuinfo | grep -i altivec >/dev/null`
	if test "$?" = "0"; then
		AC_DEFINE(HAVE_ALTIVEC_LINUX, 1, "Is there Altivec Support ?")
		if test "$gcc_major_version" = "3"; then
			OPTIM_FLAGS="-O2 -mcpu=7400 -maltivec -mabi=altivec"
		else
			OPTIM_FLAGS="-O3 -mcpu=7400"
		fi
	else
		OPTIM_FLAGS="-O3 -mcpu=750 -mmultiple"
	fi
	OPTIM_FLAGS="$OPTIM_FLAGS -mhard-float -mpowerpc-gfxopt"
elif echo $target_cpu | grep "i*86" >/dev/null; then
	cat /proc/cpuinfo | grep mmx >/dev/null
	if test $? = 0; then
		mmx="-mmmx"
	fi
	cat /proc/cpuinfo | grep sse >/dev/null
	if test $? = 0; then
		sse="-msse -mfpmath=sse"
	fi
	cat /proc/cpuinfo | grep 3dnow >/dev/null
	if test $? = 0; then
		dreidnow="-m3dnow"
	fi
	AC_DEFINE(INTEL, 1, "Nope its intel")
	if test "$target_cpu" = "i586"; then
		OPTIM_FLAGS="-O3 -march=i586"
	elif test "$target_cpu" = "i686"; then
		OPTIM_FLAGS="-O3 -march=i686"
		if test "$gcc_major_version" = "3"; then
			OPTIM_FLAGS="$OPTIM_FLAGS $mmx $sse $dreidnow"
		fi
	fi
		
fi
if test "$target_os" == "linux"; then
	AC_CHECK_HEADERS([linux/rtc.h sys/ioctl.h fcntl.h],
		AC_DEFINE(LINUX_RTC, 1, "Is this Linux?")
		linuxRTC="Trying to use /dev/rtc for exact timing"
	)
fi
dnl Set PACKAGE_SOURCE_DIR in config.h.
packagesrcdir=`cd $srcdir && pwd`
AC_DEFINE_UNQUOTED(PACKAGE_SOURCE_DIR, "${packagesrcdir}", "Where are we?")
AC_DEFINE(HAVE_PORTAUDIO_H, 1, "Define. if PortAudio should be used")
dnl Use -Wall if we have gcc.
changequote(,)dnl
dnl CFLAGS="$CFLAGS_ORIG"
dnl LDFLAGS="$LDFLAGS_ORIG"
dnl CPPFLAGS="$CPPFLAGS_ORIG"
	
changequote([,])dnl
if test "x$CFLAGS" = "x-g -O2"; then
	CFLAGS=`echo $CFLAGS | sed 's/-g -O2//'`
	if test "x$OPTIM_FLAGS" = "x"; then
		CFLAGS="-O3 -ffast-math"
	else
		CFLAGS="$OPTIM_FLAGS"
	fi
fi
if test "$gcc_major_version" = "3" ; then
	CFLAGS="$CFLAGS -std=gnu99"
else
	CFLAGS="$CFLAGS -std=gnu89"
fi
if test "x$GCC" = "xyes"; then
  case " $CFLAGS " in
  *[\ \	]-Wall[\ \	]*) 
		;;
  *) 
		CFLAGS="$CFLAGS -Wall" ;;
  esac
fi
CFLAGS="-pedantic -fschedule-insns2 -ffast-math $CFLAGS"

AC_SUBST(SNDFILE_LIBS)
AC_SUBST(GTK_GL_LIBS)
AC_SUBST(FFTW_LIBS)
AC_SUBST(PORTAUDIO_LIBS)
AC_SUBST(SNDFILE_LIBS)
AC_SUBST(SNDFILE_INC_PREFIX)
AC_SUBST(FFTW_INC_PREFIX)

AC_OUTPUT([
Makefile
src/Makefile
intl/Makefile
po/Makefile.in
])

if test "$FFTWH" != "42" && test "$DFFTWH" = "42"; then
	echo "Using single-precision FFTW is _NOT_ recommended"
fi
if test "$HAVE_FAST_GA" = "1" || test "$target_vendor" = "apple" || test "$FGA" = "1"; then
	fast_ga="Graphics Card seems to support hw-accellerated blitting"
else
	fast_ga="Graphics Card uses Textures"
fi


echo "
Summary:
_______________________

Compiler: $CC
CFLAGS: $CFLAGS

PREFIX: $prefix

FFTW: $FFTW_LIBS
Portaudio: $PORTAUDIO_LIBS
GTK: $GTK_LIBS
GTKGLARA: $GTK_GL_LIBS

$fast_ga

$linuxRTC
"
