{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red191\green0\blue0;\red0\green0\blue0;\red96\green96\blue96;
\red0\green0\blue191;\red0\green0\blue191;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 // last mod: 31-Jul-08, revision 1\cf3 \
\
~audioDir = \cf4 "/Users/rutz/Desktop/audio_work"\cf3 ;\
\
\cf2 ////////////////////////////// Lala Func\cf3 \
\
~lalafunc = \cf5 Environment\cf3 ( know: \cf5 true\cf3  );\
~lalafunc.path = ~audioDir +/+ \cf4 "TrmrFINAL16bConTremorFiltCutBackPlainAmp.aif"\cf3 ;\
~lalafunc.path2 = ~audioDir +/+ \cf4 "TrmrFINAL16bConTremorFiltCutBack.aif"\cf3 ;\
~lalafunc.path3 = ~audioDir +/+ \cf4 "TrmRate.aif"\cf3 ;\
~lalafunc.numCh = 2;\
~lalafunc.numFrames = 891401;\
~lalafunc.bufRate  = \cf5 Buffer\cf3 .read( s, ~lalafunc.path3, 0, ~lalafunc.numFrames );\
~lalafunc.bufSound = \cf5 Buffer\cf3 .read( s, ~lalafunc.path, 0, ~lalafunc.numFrames );\
~lalafunc.marks = \cf5 ScissUtil\cf3 .readMarkersFromAIFF( ~lalafunc.path2 ).collect( \cf5 _\cf3 .pos );\
~lalafunc.markDurs = ~lalafunc.marks.slide( 2, 1 ).clump( 2 ).collect(\{ \cf5 arg\cf3  x; x[1] - x[0] \});\
~lalafunc.playToBundle = \{ \cf5 arg\cf3  ev, stake, bndl, player, durSecs, frameOffset, busIndex, numChannels, group, position;\
	ev.opMean1	= \cf5 EGM_mean\cf3 ( 4 );\
	ev.opMean2	= \cf5 EGM_mean\cf3 ( 4 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf0 	ev.opMean3	= \cf6 EGM_mean\cf0 ( 20 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 	ev.opDiff1	= \cf5 EGM_diff\cf3 .new;\
	ev.opDiff2	= \cf5 EGM_diff\cf3 .new;\
	ev.opDiff3x	= \cf5 EGM_diff\cf3 .new;\
	ev.opDiff3y	= \cf5 EGM_diff\cf3 .new;\
	ev.opDiff3z	= \cf5 EGM_diff\cf3 .new;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 //	ev.opTrig		= EGM_thresh1T( 40, 20, 12 );\cf3 \
	ev.opTrig		= \cf5 EGM_thresh1T\cf3 ( 25, 10, 12 );\
	ev.opTrig2	= \cf5 EGM_thresh1IT\cf3 ( 2, 0.5, 12 );\
	ev.group		= group;\
	ev.bus		= busIndex;\
	ev.gain		= stake.gain;\
	if( numChannels != ev.numCh, \{\
		(\cf4 "~lalafunc modTrack : numChannels should be "\cf3  ++ ev.numCh ++ \cf4 ", but is "\cf3  ++ numChannels).warn;\
	\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 	player.makeFuncDur( stake, durSecs, group );\
	player.makeFuncFullbody( stake );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 	\cf5 true\cf3 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 \};\
~lalafunc.fullbody = \{ \cf5 arg\cf3  ev, emsg;\
	\cf5 var\cf3  headBent, headBentV, headBentA, footElev, synth, buf, idx, dur, startF, rateScale, rateWeight, ampScale, shouldDist, headSpeed, dx, dy, dz, th;\
	\
\cf2 //	footElev = max( emsg.t( \\lfoot )[ 2 ], emsg.t( \\rfoot )[ 2 ]) / 10;\cf3 \
	headBent		= emsg.bentDeg( \cf7 \\thorax\cf3 , \cf7 \\head\cf3  );\
	headBentV		= ev.opMean1.( ev.opDiff1.( headBent ) * 117 );\
	headBentA		= ev.opMean2.( ev.opDiff2.( headBentV ));\
	shouldDist	= min( emsg.vdist( \cf7 \\lhumerus\cf3 , \cf7 \\head\cf3  ), emsg.vdist( \cf7 \\rhumerus\cf3 , \cf7 \\head\cf3  ));\
	headSpeed		= 1.0; \cf2 // ev.opDiff3.( emsg.t( \\head ));\cf3 \
	th = emsg.t( \cf7 \\head\cf3  );\
	dx = ev.opDiff3x.( th[ 0 ]);\
	dy = ev.opDiff3y.( th[ 1 ]);\
	dz = ev.opDiff3z.( th[ 2 ]);\
	headSpeed = ev.\cf0 opMean3.( \cf3 sqrt( dx.squared + dy.squared + dz.squared ));\
\cf2 //	\cf3 \
\cf2 //	(ev.opDiff3.( emsg.t( \\head ))).asString.postln;\cf3 \
	\
\cf2 //	rateScale = headBentV.linexp( 0, 180, 0.1, 1.0 );\cf3 \
	rateScale = headBentA.abs.linexp( 0, 20, 0.1, 1.0 );\
	rateWeight = 0.33;\
	ampScale = shouldDist.linlin( 0, 160, 6, -18 ).dbamp;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 	if( ~egm_visualizer.notNil, \{\
		~egm_visualizer.text = \cf4 "Bent: "\cf3  ++ headBent.round( 0.1 ) ++ \cf4 "\'a1 ; Velo: "\cf3  ++ headBentV.round( 0.1 ) ++ \cf4 "\'a1/s ; Acc: "\cf3  ++ headBentA.round( 0.1 ) ++ \cf4 "\'a1/ss ; should = "\cf3  ++ shouldDist.asInteger ++ \cf4 "; head speed = "\cf3  ++ headSpeed.round( 0.01 ).asString;\
	\});\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 	if( ev.opTrig.( headBent ), \{\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 		if( ~egm_visualizer.notNil, \{\
			~egm_visualizer.trig = \cf5 true\cf3 ;\
			~egm_visualizer.text = \cf4 "Bent: "\cf3  ++ headBent.round( 0.1 ) ++ \cf4 "\'a1 ; Velo: "\cf3  ++ headBentV.round( 0.1 ) ++ \cf4 "\'a1/s ; Acc: "\cf3  ++ headBentA.round( 0.1 ) ++ \cf4 "\'a1/ss ; should = "\cf3  ++ shouldDist.asInteger;\
		\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 \
		if( ev.synth.notNil, \{\
			ev.synth.release( 3.0 );\
			ev.synth = \cf5 nil\cf3 ;\
		\});\
				\
		synth = \cf5 Synth\cf3 .basicNew( \cf7 \\trmPlay3\cf3 , s );\
		synth.register;\
		\cf5 UpdateListener\cf3 .newFor( synth, \{ \cf5 arg\cf3  upd, synth;\
			if( synth == ev.synth, \{\
				ev.synth = \cf5 nil\cf3 ;\
			\});\
			upd.remove;\
		\}, \cf7 \\n_end\cf3  );\
		s.listSendMsg( synth.newMsg( ev.group, [  \cf7 \\phaseBus\cf3 , ev.phaseBus, \cf7 \\audioBuf\cf3 , ev.bufSound, \cf7 \\out\cf3 , 0, \cf7 \\ampScale\cf3 , ev.gain * ampScale ]));\
		ev.phaseSynth.set( \cf7 \\rateScale\cf3 , rateScale, \cf7 \\rateWeight\cf3 , rateWeight );\
\cf2 //		~gaga = buf;\cf3 \
		ev.synth = synth;\
	\}, \{ if( ev.opTrig2.( headSpeed ), \{\
		\cf4 "OFF"\cf3 .postln;\
		if( ev.synth.notNil, \{\
			ev.synth.release( headBentV.linexp( 0, 10, 0.5, 0.01 ));\
			ev.synth = \cf5 nil\cf3 ;\
		\});\
	\}, \{\
		if( ev.synth.notNil, \{\
			ev.synth.set( \cf7 \\ampScale\cf3 , ampScale );\
			ev.phaseSynth.set( \cf7 \\rateScale\cf3 , rateScale, \cf7 \\rateWeight\cf3 , rateWeight );\
		\});\
	\})\});\
\};\
\
\cf2 ////////////////////////////// T2 Func\cf3 \
\
~t2func = \cf5 Environment\cf3 ( know: \cf5 true\cf3  );\
~t2func.playToBundle = \{ \cf5 arg\cf3  ev, stake, bndl, player, durSecs, frameOffset, busIndex, numChannels, group, position;\
	player.makeFuncDur( stake, durSecs, group );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 	ev.gain		= stake.gain;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 	ev.synthAmp = player.makeFuncSynth( stake, \cf7 \\egm_ampflt\cf3  ++ numChannels, [ \cf7 \\i_bus\cf3 , busIndex ]);\
	player.makeFuncFullbody( stake );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 	\cf5 true\cf3 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 \};\
~t2func.fullbody = \{ \cf5 arg\cf3  ev, emsg;\
	\cf5 var\cf3  footElev, amp;\
	footElev = max( emsg.t( \cf7 \\lfoot\cf3  )[ 2 ], emsg.t( \cf7 \\rfoot\cf3  )[ 2 ]) / 10;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 //	if( ~egm_visualizer.notNil, \{ ~egm_visualizer.text = "Foot-Elev: " ++ footElev.asInteger.asString \});\cf3 \
	amp = footElev.linlin( 0, 90, -48, 12 ).dbamp * ev.gain;\
	if( ev.synthAmp.isPlaying, \{ ev.synthAmp.set( \cf7 \\amp\cf3 , amp )\});\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 \};\
\
\cf2 /////////////////////////// Synth Defs\cf3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 // (\cf3 \
\cf5 SynthDef\cf3 ( \cf7 \\egm_verb\cf3 , \{ \cf5 arg\cf3  in, out1, out2;\
	\cf5 var\cf3  verb;\
	verb = \cf5 GVerb\cf3 .ar( \cf5 In\cf3 .ar( in ));\
	\cf5 Out\cf3 .ar( out1, verb[0] );\
	\cf5 Out\cf3 .ar( out2, verb[1] );\
\}).send( s );\
\
\cf5 SynthDef\cf3 ( \cf7 \\egm_tsend\cf3 , \{ \cf5 arg\cf3  i_in, i_out, i_dur = 0.2, i_atk = 0.005;\
	\cf5 var\cf3  line, atk;\
	line = \cf5 Line\cf3 .ar( 1.0, 0.0, i_dur, doneAction: 2 );\
	atk = \cf5 Line\cf3 .ar( dur: i_atk );\
	\cf5 Out\cf3 .ar( i_out, \cf5 In\cf3 .ar( i_in ) * line * atk );\
\}).send( s );\
\
\cf5 SynthDef\cf3 ( \cf7 \\egm_tautosend\cf3 , \{ \cf5 arg\cf3  i_in, i_out, i_dur = 1.0, i_boost = 2, i_atk = 0.005;\
	\cf5 var\cf3  line, atk, gate, inp;\
	line = \cf5 Line\cf3 .ar( 1.0, 0.0, i_dur, doneAction: 2 );\
	atk = \cf5 Line\cf3 .ar( dur: i_atk );\
	inp = \cf5 In\cf3 .ar( i_in );\
	\cf5 Out\cf3 .ar( i_out, \cf5 LeakDC\cf3 .ar( \cf5 Gate\cf3 .ar( inp * atk, (line * i_boost) - inp.abs )));\
\}).send( s );\
\
(1..8).do(\{ \cf5 arg\cf3  numCh;\
	\cf5 SynthDef\cf3 ( \cf7 \\egm_ampflt\cf3  ++ numCh, \{ \cf5 arg\cf3  i_bus, amp = 0;\
		\cf5 ReplaceOut\cf3 .ar( i_bus, \cf5 In\cf3 .ar( i_bus, numCh ) * \cf5 LagUD\cf3 .kr( amp, 0.02, 2.0 ));\
	\}).send( s );\
\
	\cf5 SynthDef\cf3 ( \cf7 \\egm_dlyampflt\cf3  ++ numCh, \{ \cf5 arg\cf3  i_bus, amp = 0;\
		\cf5 ReplaceOut\cf3 .ar( i_bus, \cf5 In\cf3 .ar( i_bus, numCh ) * \cf5 LagUD\cf3 .kr( \cf5 DelayN\cf3 .kr( amp, 3, 3 ), 0.02, 2.0 ));\
	\}).send( s );\
	\
	\cf5 SynthDef\cf3 ( \cf7 \\egm_diskdur\cf3  ++ numCh, \{ \cf5 arg\cf3  i_bus, i_buf, i_dur, amp = 1.0;\
		\cf5 Line\cf3 .kr( dur: i_dur, doneAction: 2 );\
		\cf5 Out\cf3 .ar( i_bus, \cf5 DiskIn\cf3 .ar( numCh, i_buf ) * amp );\
	\}).send( s );\
	\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf3 	\cf5 SynthDef\cf3 ( \cf7 \\egm_achilles\cf3  ++ numCh, \{\
		\cf5 arg\cf3  in, out, aBuf, rate = 1.0, writeAmt = 0.0, amp = 1.0;\
\
		\cf5 var\cf3  inp, writeRate, readRate, readPhasor, read;\
		\cf5 var\cf3  numFrames, writePhasor, old, wet, dry;\
\
		inp			= \cf5 In\cf3 .ar( in, numCh );\
		numFrames		= \cf5 BufFrames\cf3 .kr( aBuf );\
		writeRate 	= \cf5 BufRateScale\cf3 .kr( aBuf );\
		readRate	 	= writeRate * rate;\
		readPhasor	= \cf5 Phasor\cf3 .ar( 0, readRate, 0, numFrames );\
		read			= \cf5 BufRd\cf3 .ar( numCh, aBuf, readPhasor, 0, 4 );\
		writePhasor	= \cf5 Phasor\cf3 .ar( 0, writeRate, 0, numFrames );\
		old			= \cf5 BufRd\cf3 .ar( numCh, aBuf, writePhasor, 0, 1 );\
		wet			= \cf5 SinOsc\cf3 .ar( 0, ((readPhasor - writePhasor).abs / numFrames * pi) );\
		dry			= 1 - wet.squared;\
		wet			= 1 - (1 - wet).squared;\
		\cf5 BufWr\cf3 .ar( (old * dry) + (inp * writeAmt * wet), aBuf, writePhasor );\
		\
		\cf5 Out\cf3 .ar( out, (read * amp).asArray.scramble );\
	\}, [ \cf5 nil\cf3 , \cf5 nil\cf3 , \cf5 nil\cf3 , 0.1, 0.1, 0.1 ]).send( s );\
	\
	\cf5 SynthDef\cf3 ( \cf7 \\egm_gendy\cf3  ++ numCh, \{ \cf5 arg\cf3  bus, amount, i_atk, gate = 1;\
		\cf5 var\cf3  ins, outs, laggo, minFreq, scale, env;\
		\
		env		= \cf5 EnvGen\cf3 .kr( \cf5 Env\cf3 .asr( i_atk, 1.0, 1.0, \cf7 \\sin\cf3  ), gate, doneAction: 2 );\
		ins		= \cf5 In\cf3 .ar( bus, numCh );\
		laggo	= \cf5 Lag\cf3 .kr( amount );\
		minFreq	= laggo * 69 + 12;\
		scale	= laggo * 13 + 0.146;\
		outs		= \cf5 Gendy1\cf3 .ar( 2, 3, 1, 1,\
					minfreq: minFreq, maxfreq: minFreq * 8,\
					ampscale: scale, durscale: scale,\
					initCPs: 7, mul: ins );\
		outs		= \cf5 Compander\cf3 .ar( outs, outs, 0.7, 1, 0.1, 0.001, 0.02 );\
		\cf5 XOut\cf3 .ar( bus, env, outs.asArray.scramble );\
	\}).send( s );\
	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 //SynthDef( \\trmPlay, \{ arg rateBuf, audioBuf, out, rateWeight = 1.0, rateScale = 1.0, ampScale = 1.0;\cf3 \
\cf2 //	var phase1, phase2;\cf3 \
\cf2 //	\cf3 \
\cf2 //	phase1 = LocalIn.ar( 1 );\cf3 \
\cf2 //	phase2 = Phasor.ar( 0, ((BufRd.ar( 1, rateBuf, phase1, 1, 1 ) * rateWeight) + (1 - rateWeight)) * rateScale, 0, BufFrames.kr( rateBuf ));\cf3 \
\cf2 //	Out.ar( out, BufRd.ar( 2, audioBuf, phase2, 1, 4 ) * ampScale );\cf3 \
\cf2 //	LocalOut.ar( phase2 );\cf3 \
\cf2 //\}).send( s );\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf5 SynthDef\cf3 ( \cf7 \\trmPlay2\cf3 , \{ \cf5 arg\cf3  rateBuf, audioBuf, out, rateWeight = 1.0, rateScale = 1.0, ampScale = 1.0, gate = 1, i_atk;\
	\cf5 var\cf3  phase1, phase2;\
	\
	ampScale = ampScale * \cf5 EnvGen\cf3 .ar( \cf5 Env\cf3 .asr( i_atk, 1.0, 1.0, \cf7 \\sin\cf3  ), gate, doneAction: 2 );\
	\
	phase1 = \cf5 LocalIn\cf3 .ar( 1 );\
	phase2 = \cf5 Phasor\cf3 .ar( 0, ((\cf5 BufRd\cf3 .ar( 1, rateBuf, phase1, 1, 1 ) * rateWeight) + (1 - rateWeight)) * rateScale, 0, \cf5 BufFrames\cf3 .kr( rateBuf ));\
	\cf5 Out\cf3 .ar( out, \cf5 BufRd\cf3 .ar( 2, audioBuf, phase2, 1, 4 ) * ampScale );\
	\cf5 LocalOut\cf3 .ar( phase2 );\
\}).send( s );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf5 SynthDef\cf3 ( \cf7 \\trmPlay3\cf3 , \{ \cf5 arg\cf3  phaseBus, audioBuf, out, rateWeight = 1.0, rateScale = 1.0, ampScale = 1.0, gate = 1, i_atk;\
	\cf5 var\cf3  phase2;\
	\
	phase2 = \cf5 In\cf3 .ar( phaseBus );\
	ampScale = ampScale * \cf5 EnvGen\cf3 .ar( \cf5 Env\cf3 .asr( i_atk, 1.0, 1.0, \cf7 \\sin\cf3  ), gate, doneAction: 2 );\
	\cf5 Out\cf3 .ar( out, \cf5 BufRd\cf3 .ar( 2, audioBuf, phase2, 1, 4 ) * ampScale );\
\
\}).send( s );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf5 SynthDef\cf3 ( \cf7 \\trmPlay3p\cf3 , \{ \cf5 arg\cf3  rateBuf, phaseBus, rateWeight = 1.0, rateScale = 1.0;\
	\cf5 var\cf3  phase1, phase2;\
	\
	phase1 = \cf5 LocalIn\cf3 .ar( 1 );\
	phase2 = \cf5 Phasor\cf3 .ar( 0, ((\cf5 BufRd\cf3 .ar( 1, rateBuf, phase1, 1, 1 ) * rateWeight) + (1 - rateWeight)) * rateScale, 0, \cf5 BufFrames\cf3 .kr( rateBuf ));\
	\cf5 LocalOut\cf3 .ar( phase2 );\
	\cf5 Out\cf3 .ar( phaseBus, phase2 );\
\}).send( s );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf3 \
\cf2 // )\cf3 \
\
s.sync;\
\
~lalafunc.phaseBus = \cf5 Bus\cf3 .audio( s, 1 );\
~lalafunc.phaseSynth = \cf5 Synth\cf3 ( \cf7 \\trmPlay3p\cf3 , [ \cf7 \\rateBuf\cf3 , ~lalafunc.bufRate, \cf7 \\phaseBus\cf3 , ~lalafunc.phaseBus ]);\
}