{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fnil\fcharset77 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red0\green0\blue0;\red0\green115\blue0;
\red191\green0\blue0;\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 Bosque\cf3 .track( \cf4 \\Track_1\cf3  ).level; \cf5 // at the current timeline position\cf3 \
\cf2 Bosque\cf3 .track( \cf4 \\Track_2\cf3  ).level;\
\cf2 Bosque\cf3 .track( \cf4 \\Track_3\cf3  ).level;\
\
\cf2 Bosque\cf3 .track( \cf4 \\Track_2\cf3  ).level( 441000 ); \cf5 // at 10 seconds\cf3 \
\
(\
	\cf2 var\cf3  slid, upd, rout, win;\
\
	~doc = \cf2 Bosque\cf3 .default.session;\
	~track = ~doc.tracks.find( \cf4 \\Track_1\cf3  );\
	\
	win = \cf2 GUI\cf3 .window.new( \cf6 "Env.at"\cf3 , \cf2 Rect\cf3 ( 100, 100, 40, 200 ), resizable: \cf2 false\cf3  );\
	slid = \cf2 GUI\cf3 .slider.new( win, \cf2 Rect\cf3 ( 5, 5, 20, 190 )).background_( \cf2 Color\cf3 .black ).knobColor_( \cf2 Color\cf3 .white );\
	upd = \cf2 UpdateListener\cf3 .newFor( ~doc.transport, \{ \cf2 arg\cf3  upd, trnsp, what, param;\
		what.postcs;\
		switch( what,\
		\cf4 \\play\cf3 , \{ rout = fork \{ \cf2 inf\cf3 .do(\{\
			\{ slid.value = ~track.level \}.defer;\
			0.05.wait;\
		\})\}\},\
		\cf4 \\stop\cf3 , \{ rout.stop; rout = \cf2 nil\cf3  \}\
		);\
	\});\
	slid.onClose = \{ rout.stop; rout = \cf2 nil\cf3 ; upd.remove \};\
	win.front;\
)\
\
\cf5 // again monitor Track_1, but using a Swing GUI\cf3 \
\cf2 GUI\cf3 .swing; \cf5 // here we don't need to defer to AppClock\cf3 \
(\
	\cf2 var\cf3  slid, upd, rout, track;\
\
	~doc = \cf2 Bosque\cf3 .default.session;\
	track = ~doc.tracks.find( \cf4 \\Track_1\cf3  );\
	\
	~win = \cf2 GUI\cf3 .window.new( \cf6 "Env.at"\cf3 , \cf2 Rect\cf3 ( 100, 100, 60, 200 ), resizable: \cf2 false\cf3  );\
	slid = \cf2 GUI\cf3 .slider.new( ~win, \cf2 Rect\cf3 ( 5, 5, 20, 190 )).background_( \cf2 Color\cf3 .black ).knobColor_( \cf2 Color\cf3 .white );\
	upd = \cf2 UpdateListener\cf3 .newFor( ~doc.transport, \{ \cf2 arg\cf3  upd, trnsp, what, param;\
		what.postcs;\
		switch( what,\
		\cf4 \\play\cf3 , \{ rout = fork \{ \cf2 inf\cf3 .do(\{\
			slid.value = track.level ? 0.0;\
			0.05.wait;\
		\})\}\},\
		\cf4 \\stop\cf3 , \{ rout.stop; rout = \cf2 nil\cf3  \}\
		);\
	\});\
	slid.onClose = \{ rout.stop; rout = \cf2 nil\cf3 ; upd.remove \};\
	~win.front;\
)\
\
\cf5 // Track_2 hinzufuegen\cf3 \
(\
	\cf2 var\cf3  slid, upd, rout, track;\
\
	~doc = \cf2 Bosque\cf3 .default.session;\
	track = ~doc.tracks.find( \cf4 \\Track_2\cf3  );\
	\
	slid = \cf2 GUI\cf3 .slider.new( ~win, \cf2 Rect\cf3 ( 28, 5, 20, 190 )).background_( \cf2 Color\cf3 .black ).knobColor_( \cf2 Color\cf3 .white );\
	upd = \cf2 UpdateListener\cf3 .newFor( ~doc.transport, \{ \cf2 arg\cf3  upd, trnsp, what, param;\
		what.postcs;\
		switch( what,\
		\cf4 \\play\cf3 , \{ rout = fork \{ \cf2 inf\cf3 .do(\{\
			slid.value = track.level ? 0.0;\
			0.05.wait;\
		\})\}\},\
		\cf4 \\stop\cf3 , \{ rout.stop; rout = \cf2 nil\cf3  \}\
		);\
	\});\
	slid.onClose = \{ rout.stop; rout = \cf2 nil\cf3 ; upd.remove \};\
)\
}