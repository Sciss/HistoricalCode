{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf330
{\fonttbl\f0\fnil\fcharset238 Monaco;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;\red0\green115\blue0;\red0\green0\blue191;\red96\green96\blue96;\red0\green115\blue0;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf2 (\
\cf3 //fork \{\cf2 \
\
\cf4 EGMTrackingInput\cf2 .start;\
\cf4 EGMTrackingInput\cf2 .getAll;\
\
\cf3 // setup\cf2 \
\
q = q ? ();\
\
q.length = 0;		\cf3 // in s, will be set when file is loaded\cf2 \
\cf3 //q.b1 = Buffer.read(s, EGM.snd("gerhard/merce1.aif"), action: \{ arg b; q.length = b.duration \});\cf2 \
q.b1 = \cf4 Buffer\cf2 .read(s, \cf4 EGM\cf2 .snd(\cf5 "hh/CrosshatchCutL.wav"\cf2 ), action: \{ \cf4 arg\cf2  b; q.length = b.duration \});\
\
\cf3 // parameters\cf2 \
\
q.offset = 1;		\cf3 // pos in s in soundfile corresponding to origin in space\cf2 \
q.scale = 0.5; 		\cf3 // number of s in soundfile per m in space\cf2 \
q.level = -10;	\cf3 // in dB\cf2 \
\
\cf3 // synthesis\cf2 \
\
q.theSynth = \cf4 Synth\cf2 .basicNew(\cf5 "scratch_abs_synth"\cf2 ); \cf3 // q.synth is per-defined\cf2 \
\
\cf4 SynthDef\cf2 (\cf5 "scratch_abs_synth"\cf2 , \{ \cf4 arg\cf2  out = 0, bufnum, rate = 10, pos = 1, amp = 0.01;\
	\cf4 Out\cf2 .ar(0, \cf4 TGrains\cf2 .ar(2, \cf4 Impulse\cf2 .ar(rate), bufnum, 1, pos, 4 / rate, 0, amp, interp:4)[0]);\
\}).send(s, q.theSynth.newMsg( \cf4 nil\cf2 , [\cf6 \\bufnum\cf2 , q.b1.bufnum, \cf6 \\amp\cf2 , 0])); \cf3 // q.synth is per-defined\cf2 \
\
\cf3 // mapping\cf2 \
\
q.map = \{ \cf4 arg\cf2  env, key, name;\
\
	\cf4 var\cf2  changed = \cf4 EGM_hasChanged\cf2 (0, name ++ \cf5 ": "\cf2  ++ key);\
\
	\cf4 EGMTrackingInput\cf2 .register(key, \{ \cf4 arg\cf2  args;\
		\cf4 var\cf2  pos = (args[0] / 1000) * q.scale;			\cf3 // pos on x-axis\cf2 \
		\cf4 var\cf2  mapped = pos.mod(q.length) + q.offset;	\cf3 // repeated and offset\cf2 \
\
		q.theSynth.set(\
			\cf6 \\rate\cf2 , args[2].linexp(0, 2000, 10, 100),\
			\cf6 \\pos\cf2 , mapped,\
			\cf6 \\amp\cf2 , q.level.dbamp * changed.(args)\
		);\
	\});\
\};\
\
\cf4 EGMTrackingInput\cf2 .deregisterAll;\
q.map(\cf6 '/4er/4er/T'\cf2 , \cf5 "scratch_abs_synth"\cf2 );\
\cf3 //\};\cf2 \
\
)\
\
\cf4 EGMTrackingInput\cf2 .verbose(\cf4 true\cf2 );\
\cf4 EGMTrackingInput\cf2 .verbose(\cf4 false\cf2 );\
\cf3 // MIDI input\cf2 \
\
q.verbose = \cf4 true\cf2 ;\
q.controller = q.controller ? ();\
q.controller.do \{ \cf4 arg\cf2  responder; responder.remove \};\
\
q.control = \{ \cf4 arg\cf2  env, parameter, slider, min, max, curve;\
	if (q.controller[parameter].notNil) \{\
		q.controller[parameter].remove;\
	\};\
	q.controller[parameter] = \cf4 CCResponder\cf2 (\{ \cf4 arg\cf2  s, c, n, v;\
			q[parameter] = switch(curve,\
				\cf6 \\lin\cf2 , \{ v.linlin(0, 127, min, max) \},\
				\cf6 \\exp\cf2 , \{ v.linexp(0, 127, min, max) \}\
			);\
			if (q.verbose) \{\
				postf(\cf5 "parameter % = %\\n"\cf2 , parameter, q[parameter]);\
			\};\
			q[parameter]\
		\}, \cf4 nil\cf2 , slider - 1, 7);\
	q.controller[parameter].postln;\
\};\
\
q.control(\cf6 \\offset\cf2 , 1, 0, q.length, \cf6 \\lin\cf2 );\
q.control(\cf6 \\scale\cf2 , 2, 0.01, 10, \cf6 \\exp\cf2 );\
\cf3 //q.control(\\level, 8, -80, 0, \\lin);\cf2 \
\
~volCon = \cf4 CCResponder\cf2 (\{ \cf4 arg\cf2  src, c, n, v; s.volume.volume = v.linlin( 0, 127, -90, 6 )\}, \cf4 nil\cf2 , 7, 7 );\
~muteCon = \cf4 CCResponder\cf2 (\{ \cf4 arg\cf2  src, c, n, v; s.volume.perform( if( v == 0, \cf6 \\unmute\cf2 , \cf6 \\mute\cf2  ))\}, \cf4 nil\cf2 , 7, 0 ); \
\cf3 //~muteCon.remove\cf2 \
\
\pard\pardeftab560\ql\qnatural
\cf4 CCResponder\cf2 .removeAll;\
\
\cf3 /////////////////////// Bosque bindings\cf2 \
\
~t1 = \cf4 Bosque\cf2 .track( \cf6 \\Track_1\cf2  );\
~t1.map;\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 q.map = \{ \cf4 arg\cf2  env, key, name;\
\
	\cf4 var\cf2  changed = \cf4 EGM_hasChanged\cf2 (0, name ++ \cf5 ": "\cf2  ++ key);\
\
	\cf4 EGMTrackingInput\cf2 .register(key, \{ \cf4 arg\cf2  args;\
		\cf4 var\cf2  pos, mapped;\
		\
		q.scale = ~t1.map ? 0.1;\
		pos = (args[0] / 1000) * q.scale;			\cf3 // pos on x-axis\cf2 \
		mapped = pos.mod(q.length) + q.offset;	\cf3 // repeated and offset\cf2 \
\
		q.theSynth.set(\
			\cf6 \\rate\cf2 , args[2].linexp(0, 2000, 10, 100),\
			\cf6 \\pos\cf2 , mapped,\
			\cf6 \\amp\cf2 , q.level.dbamp * changed.(args)\
		);\
	\});\
\};\
\
\cf4 EGMTrackingInput\cf2 .deregisterAll;\
q.map(\cf6 '/4er/4er/T'\cf2 , \cf5 "scratch_abs_synth"\cf2 );\
)\
\
\pard\pardeftab560\ql\qnatural
\cf2 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 q = q ? ();\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\ql\qnatural\pardirnatural
\cf2 q.map2 = \{ \cf4 arg\cf2  env, key, name;\
	\cf4 var\cf2  changed, win, angles, clpse, blink, diffs, diffOp;\
\
	angles = 0 ! 3;\
	blink  = 0 ! 3;\
	diffs  = 0 ! 3;\
\cf3 //	changed = EGM_speed( 5, 5 );\cf2 \
	diffOp  = \cf4 Array\cf2 .fill( 3, \{ \cf4 EGM_diff\cf2 .new \});\
\
	win = \cf4 JSCWindow\cf2 ( \cf5 "Angles"\cf2 , \cf4 Rect\cf2 ( 0, 0, 620, 220 ), resizable: \cf4 false\cf2  );\
	\cf4 ScissUtil\cf2 .positionOnScreen( win );\
	win.view.background = \cf4 Color\cf2 .white;\
	win.front;\
	win.drawHook = \{\
		\cf4 JPen\cf2 .translate( 10, 10 );\
		\cf4 JPen\cf2 .scale( 100, 100 );\
		\cf4 JPen\cf2 .translate( 1, 1 );\
		\cf4 JPen\cf2 .width = 0.1;\
		angles.do(\{ \cf4 arg\cf2  angle, i;\
			\cf4 JPen\cf2 .strokeColor = \cf4 Color\cf2 ( blink[ i ], 0, 0 );\
			blink[ i ] = blink[ i ] * 0.8;\
			angle = angle.neg + 0.5pi;\
\cf3 //			JPen.use(\{\cf2 \
\cf3 //				JPen.rotate( angle );\cf2 \
				\cf4 JPen\cf2 .line( 0 @ 0, cos( angle ) @ sin( angle ).neg );\
				\cf4 JPen\cf2 .strokeOval( \cf4 Rect\cf2 .aboutPoint( 0 @ 0, 1, 1 ));\
\cf3 //				JPen.stroke;\cf2 \
\cf3 //			\});\cf2 \
			\cf4 JPen\cf2 .stroke;\
			\cf4 JPen\cf2 .translate( 2, 0 );\
		\});\
	\};\
	clpse = \cf4 Collapse\cf2 (\{ win.refresh \}, 0.05 );\
	\
	win.onClose = \{ \cf4 EGMTrackingInput\cf2 .register( key, \cf4 nil\cf2  )\};\
\
	\cf4 EGMTrackingInput\cf2 .register(key, \{ \cf4 arg\cf2  args;\
		\cf4 var\cf2  pos, mapped, pos1, pos2, cp;\
\
\cf3 //		args.postln;\cf2 \
		angles[ 0 ] = args[ 0 ] % 2pi;\
		angles[ 1 ] = args[ 1 ] % 2pi;\
		angles[ 2 ] = args[ 2 ] % 2pi;\
		\
		diffOp.do(\{ \cf4 arg\cf2  op, i;\
			if( abs( op.value( angles[ i ])) > pi, \{\
				blink[ i ] = 1.0;\
\cf3 //				if( ((i == 1) && ~transp.notNil) and: \{ ~transp.isRunning && ~transp.isPaused.not \}, \{\cf2 \
\cf3 //					cp = ~transp.currentFrame;\cf2 \
\cf3 //					~transp.pause;\cf2 \
\cf3 //					pos1 = Bosque.mark( \\Pt1 ).pos;\cf2 \
\cf3 //					pos2 = Bosque.mark( \\Pt2 ).pos;\cf2 \
\cf3 //					~transp.resume( if( cp > pos2, pos1, pos2 ));\cf2 \
\cf3 //				\});\cf2 \
			\});\
		\});\
		\
		clpse.instantaneous;\
		\
		q.theSynth.set( \cf6 \\pan\cf2 , angles[ 2 ]);\
		\
\cf3 //		q.scale = ~t1.map ? 0.1;\cf2 \
\cf3 //		pos = (args[0] / 1000) * q.scale;			// pos on x-axis\cf2 \
\cf3 //		mapped = pos.mod(q.length) + q.offset;	// repeated and offset\cf2 \
\cf3 //\cf2 \
\cf3 //		q.theSynth.set(\cf2 \
\cf3 //			\\rate, args[2].linexp(0, 2000, 10, 100),\cf2 \
\cf3 //			\\pos, mapped,\cf2 \
\cf3 //			\\amp, q.level.dbamp * changed.(args)\cf2 \
\cf3 //		);\cf2 \
	\});\
\};\
\
\cf4 EGMTrackingInput\cf2 .deregisterAll;\
q.map2(\cf6 '/4er/4er/A'\cf2 , \cf5 "angular_test"\cf2 );\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural
\cf2 \
~stop = ();\
~transp = \cf4 Bosque\cf2 .default.session.transport;\
~stop.playToBundle = \{ \cf4 arg\cf2  ev; \cf5 "~stop"\cf2 .postln; \{ ~transp.stop; ev.changed( \cf6 \\playing\cf2 , \cf4 false\cf2  )\}.defer; \cf4 true\cf2  \};\
\
\cf0 ~pause = ();\
~pause.playToBundle = \{ \cf7 arg\cf0  ev; \cf8 "~pause"\cf0 .postln; \{ ~transp.pause; ev.changed( \cf9 \\playing\cf0 , \cf7 false\cf0  )\}.defer; \cf7 true\cf0  \};\
\cf2 \
\cf3 //q.theSynth.free\cf2 \
\
\cf3 // assuming Session080728_1\cf2 \
\
\cf4 Bosque\cf2 .track( \cf6 \\Track_1\cf2  ).busConfig.bus;\
\cf4 Bosque\cf2 .default.masterBus;\
\cf4 Bosque\cf2 .default.postFilterGroup;\
\
~numCh = \cf4 Bosque\cf2 .default.masterBus.numChannels;\
~defName = \cf6 \\panTest\cf2  ++ ~numCh;\
(\
\cf4 SynthDef\cf2 ( ~defName, \{ \cf4 arg\cf2  inBus, outBus, pan;\
	\cf4 Out\cf2 .ar( outBus, \cf4 PanAz\cf2 .ar( ~numCh,\cf4 In\cf2 .ar( inBus ), pan.neg / pi, 1.0, 2.0, 0.0 ));\
\}).send( s );\
)\
\
q.theSynth = \cf4 Synth\cf2 ( ~defName, [ \cf6 \\inBus\cf2 , \cf4 Bosque\cf2 .track( \cf6 \\Track_1\cf2  ).busConfig.bus, \cf6 \\outBus\cf2 , \cf4 Bosque\cf2 .default.masterBus ], \cf4 Bosque\cf2 .default.postFilterGroup, \cf6 \\addAfter\cf2  );\
\cf3 //q.theSynth.register;\cf2 \
\cf3 //UpdateListener.newFor( q.theSynth, \{ arg upd, node; q.theSynth = \cf2 \
\
q.theSynth.free; q.theSynth;\
}